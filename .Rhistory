"Eigenvector centrality"="Eigenvector centrality\tevcent(igraph)$vector",
"Subgraph centrality"="Subgraph centrality\tsubgraph.centrality(igraph)"
)
eranking_methods <- c(
"Betweenness centrality"="Betweenness centrality\tedge.betweenness(igraph)"
)
ui_options <- c(
"ui_table_line_height" = "80%"
)
ui_css <- paste0('
.box-panel {
border-radius: 0 0 5px 5px;
border-width: 1px;
border-color: #d7d7d7;
border-style: none solid solid solid;
}
.box-panel-padding {
padding: 20px 20px 20px 20px;
}
.tabBox-panel {
padding: 20px 20px 20px 20px;
border-width: 1px;
border-color: #d7d7d7;
border-radius: 0px 0px 8px 8px;
border-style: none solid solid solid;
background: #ffffff;
}
.centerBlock {
float: none;
margin: 0 auto;
}
',".dataTables_wrapper td {
line-height: ",ui_options['ui_table_line_height'],";
}")
ui_dataTable_panel <- function(datasetName, pagination = TRUE){
return(parse(text=paste0("div(div(DT::dataTableOutput('",datasetName,"'), class='box-panel-padding'), class='box-panel')")))
}
fluidPage(useShinyjs(),
tags$head(tags$script(src="cyjs.js")),
navbarPage("The Network Analysis Provider (NAP)", header=tags$head(tags$style(type="text/css", ui_css)),
tabPanel("Welcome",
h2("Welcome to the Network Analysis Provider"),
strong("a mediator for shaking hands between graph theory and systems biology."),
br(),
br(),
helpText("Upload networks with up to 10,000 edges and perform analyses such as:"),
tags$ul(
tags$li("Exploring topological features"),
tags$li("Rank nodes/edges by properties"),
tags$li("Compare Networks to each other"),
tags$li("Use various layouts to see the network"),
tags$li("See whether a network follows a specific model distribution")
)
),
tabPanel("Upload File(s)", icon = icon("upload"),
sidebarLayout(
sidebarPanel(
bsAlert("tabUploadSideAlert"),
helpText("Please follow the steps below:"),
tags$ul(
tags$li("Load your network file in tab delimited format"),
tags$li("Choose the network type"),
tags$li("Give it a name"),
tags$li("Hit the ADD button")
),
selectInput("uiLoadGraphOptionsInput",
"Choose input method",
c("File upload"="oF", "Random scale-free network"="oRFS")
),
uiOutput("uiLoadGraphOptionsOutput"),
div( span( actionButton("btnAddNetwork", "ADD", icon = icon("plus")) ,class="input-group-btn"), tags$input(id="networkName", type="text", class="form-control", placeholder="Type network name ..",value="Network name"),class="input-group"),
uiOutput("uiStoredGraphsOutputRadio")
),
mainPanel(
conditionalPanel( condition = "input.availableNetworks == 0",
bsAlert("tabUploadMainAlert"),
uiOutput("uiStoredGraphsOutputSelectUpload"),
tabsetPanel(
tabPanel("Table View of Dataset(s)", icon = icon("table"),
eval(ui_dataTable_panel('datasettab1'))
),
tabPanel("Visualization",
div(div(
textOutput('info_vertices1'),
textOutput('info_edges1'),
#simpleNetworkOutput('tabVizIgraphForce'),
plotOutput('tabVizIgraphForce'),
class='box-panel-padding'
), class='box-panel')
)#,
#tabPanel("Vertices",
#	div(
#      textOutput('vertices1_label'),
#      verbatimTextOutput('vertices1'),
#      class='box-panel-padding')
#),
#tabPanel("Edges",
#	div(
#   textOutput('edges1_label') ,
#   verbatimTextOutput('edges1'),
#	class='box-panel-padding')
#)
)
)
) # mainPanel
) # sidebarLayout
), # tabPanel 'Upload File(s)'
tabPanel("Topology", icon = icon("globe", lib = "glyphicon"),
sidebarLayout(
sidebarPanel(
bsAlert("tabTopologySideAlert"),
conditionalPanel( condition = "input.statisticsMethodsMainTabsetPanel == 'tableView'",
uiOutput("uiStoredGraphsOutputSelectTopolopgy")
),
conditionalPanel( condition = "input.statisticsMethodsMainTabsetPanel == 'plotView'",
uiOutput("uiStoredGraphsOutputMultipleSelectTopolopgy")
),
helpText("Select the statistics you want in the analysis."),
checkboxGroupInput(
"statistics","The statistics:",
choices=statistics,
selected=selected_statistics
)
),
conditionalPanel( condition = "input.availableNetworks == 0",
mainPanel(
bsAlert("tabTopologyMainAlert"),
tabsetPanel(id = "statisticsMethodsMainTabsetPanel",
tabPanel("Statistic", value = "tableView", icon = icon("table"), eval(ui_dataTable_panel("statres", FALSE))),
tabPanel("The Plots", value = "plotView", icon = icon("bar-chart"),
div(div(
uiOutput("statisticsMethodsPlotRender"),
class='box-panel-padding'
), class='box-panel'),
sliderInput("statisticsPlotPercentMagnify", "Adjust plot height (% taller)", min=0, max=100, value=0)
)
)
)
)
)
),
tabPanel("Ranking", icon = icon("sort-amount-desc"),
sidebarLayout(
sidebarPanel(
bsAlert("tabRankingSideAlert"),
conditionalPanel( condition = "input.rankingMethodsMainTabsetPanel == 'tableView'",
uiOutput("uiStoredGraphsOutputSelectRanking"),
tabsetPanel(id = 'rankingTableViewTabsetPanel',
tabPanel("Node ranking", radioButtons( "vrankingTableView",label = "Method", choices=vranking_methods ), class='tabBox-panel'),
tabPanel("Edge ranking", radioButtons( "erankingTableView",label = "Method", choices=eranking_methods ), class='tabBox-panel')
)
),
conditionalPanel( condition = "input.rankingMethodsMainTabsetPanel == 'plotView'",
uiOutput("uiStoredGraphsOutputMultipleSelectRanking"),
tabsetPanel(id = 'rankingPlotViewTabsetPanel',
tabPanel("Node ranking", checkboxGroupInput( "vrankingPlotView", "Method", choices=vranking_methods ), class='tabBox-panel'),
tabPanel("Edge ranking", checkboxGroupInput( "erankingPlotView", "Method", choices=eranking_methods ), class='tabBox-panel')
)
)
),
conditionalPanel( condition = "input.availableNetworks == 0",
mainPanel(
bsAlert("tabRankingMainAlert"),
tabsetPanel(id = "rankingMethodsMainTabsetPanel",
tabPanel("Table View of Dataset(s)", value = "tableView", icon = icon("table"), eval(ui_dataTable_panel("rankeddatasettab1"))),
tabPanel("Plots", value = "plotView", icon = icon("bar-chart"),
conditionalPanel(condition = "(input.rankingPlotViewTabsetPanel == 'Node ranking' && input.vrankingPlotView.length == 1) || (input.rankingPlotViewTabsetPanel == 'Edge ranking' && input.erankingPlotView.length == 1)",
div(div(
plotOutput("rankingMethodsPowerLawScatter"),
#	plotOutput("rankingMethodsScatterPlotRender"),
class='box-panel-padding'
), class='box-panel')
),
conditionalPanel(condition = "(input.rankingPlotViewTabsetPanel == 'Node ranking' && input.vrankingPlotView.length > 1) || (input.rankingPlotViewTabsetPanel == 'Edge ranking' && input.erankingPlotView.length > 1)",
div(div(
#plotlyOutput('rankingMethodsScatterPlot', height="auto"),
#plotOutput('rankingMethodsScatterPlot'),
uiOutput("rankingMethodsScatterPlotRender"),
class='box-panel-padding'
), class='box-panel'),
sliderInput("scatterPlotMatrixPercentMagnify", "Adjust plot height (% taller)", min=0, max=100, value=0)
)
)
)
)
)
)
),
tabPanel("Layouts", icon = icon("sitemap"),
sidebarLayout(
sidebarPanel(
bsAlert("tabLayoutsMainAlert"),
uiOutput("uiStoredGraphsOutputSelectLayouts"),
uiOutput('ui_combobox_layouts_netnames'),
selectInput(
'combobox_layouts',
'Choose the layout:',
choices=sort( c(
"Random"="random",
"Circle"="circle",
"Sphere"="sphere",
"Fruchterman-Reingold"="fruchterman",
"Kamada-Kawai"="kamada",
"Reingold-Tilford"="reingold",
"Grid"="grid",
"Lgl"="lgl",
"SVD"="svd")
),
selected="random"
),
helpText("Download the coordinates of the Selected Layout."),
downloadButton("dwnld_layout","Download"),
helpText("Download the projection graphs."),
downloadButton("dwnld_projections","Download")
),
conditionalPanel( condition = "input.availableNetworks == 0",
mainPanel(
tabsetPanel(
tabPanel("Plot of the Layout",
plotOutput("plot_layout")
)
)
)
)
)
),
tabPanel("Help", icon = icon("question"),
strong("Number of Edges"),
helpText("Shows the number of edges in the network. If the has more than 10000 edges it will take into account the first 10000"),
br(),
strong("Number of Nodes"),
helpText("Shows the number of noded in the network. There is no limitation on the nuber of nodes"),
br(),
strong("Diameter"),
helpText("Shows the length of the longest geodesic.The diameter is calculated by using a breadth-first search like method.The graph-theoretic or geodesic distance between two points is defined as the length of the shortest path between them."),
br(),
strong("Radius"),
helpText("The eccentricity of a vertex is its shortest path distance from the farthest other node in the graph. The smallest eccentricity in a graph is called its radius. The eccentricity of a vertex is calculated by measuring the shortest distance from (or to) the vertex, to (or from) all vertices in the graph, and taking the maximum."),
br(),
strong("Density"),
helpText("The density of a graph is the ratio of the number of edges and the number of possible edges"),
br(),
strong("Number of Edges"),
helpText("Shows the number of edges in the network. If the has more than 10000 edges it will take into account the first 10000"),
br(),
strong("Average path length"),
helpText("The average number of steps needed to go from a node to any other"),
br(),
strong("Clustering Coefficient:"),
helpText("A metric to show if the network has the tendency to form clusters"),
br(),
strong("Modularity"),
helpText("This function calculates how modular is a given division of a graph into subgraphs"),
br(),
strong("Number of self loops"),
helpText("how many nodes are connected to themselves"),
br(),
strong("Average Eccentricity:"),
helpText("The eccentricity of a vertex is its shortest path distance from the farthest other node in the graph."),
br(),
strong("Average Eigenvector Centrality:"),
helpText("It is a measure of the influence of a node in a network."),
br(),
strong("Assortativity degree:"),
helpText("The assortativity coefficient is positive is similar vertices (based on some external property) tend to connect to each, and negative otherwise."),
br(),
strong("Is directed acyclic graph"),
helpText("It returns True (1) or False (0)"),
br(),
strong("Is directed"),
helpText("It returns True (1) or False (0) depending whether the edges are directed or not"),
br(),
strong("Is Bipartite"),
helpText("It returns True (1) or False (0) depending whether the graph is bipartite or not"),
br(),
strong("Is chordal"),
helpText("It returns True (1) or False (0). A graph is chordal (or triangulated) if each of its cycles of four or more nodes has a chord, which is an edge joining two nodes that are not adjacent in the cycle. An equivalent definition is that any chordless cycles have at most three nodes."),
br(),
strong("Average number of Neighbors"),
helpText("How many neighbors each node of the network has on average"),
br(),
strong("Centralization betweenness"),
helpText("It is an indicator of a node's centrality in a network. It is equal to the number of shortest paths from all vertices to all others that pass through that node.Betweenness centrality quantifies the number of times a node acts as a bridge along the shortest path between two other nodes"),
br(),
strong("Centralization closeness"),
helpText("It measures the speed with which randomly walking messages reach a vertex from elsewhere in the graph"),
br(),
strong("Centralization degree"),
helpText("It is defined as the number of links incident upon a node"),
br(),
strong("Graph mincut"),
helpText("calculates the minimum st-cut between two vertices in a graph The minimum st-cut between source and target is the minimum total weight of edges needed to remove to eliminate all paths from source to target."),
br(),
br()
),
# tabPanel 'Layouts'
tabPanel("Input File",
strong("The input file can be a network in tab delimited format."),
br(),
helpText("Below you can see a network sample in tab delimited format:"),
pre("
A	B
A	C
A	D
B	C
C	D
A	E
A	F"
),
helpText("Or:"),
pre("
A	B	3
A	C	3
A	D	4
B	C	1
C	D	1
A	E	4
A	F	5
D	D1	3
A1	B1	3
A1	C1	3
A1	D1	4
B1	C1	1
C1	D1	1
A1	E1	4
A1	F1	5"
)
),
tabPanel("People", icon = icon("users"),
strong("The Team:"),
tags$ul(
tags$li("Georgios Pavlopoulos - JGI, Berkeley Labs"),
tags$li("Theodosios Theodosiou - University of Crete"),
tags$li("Georgios Efstathiou - University of Crete"),
tags$li("Nikolas Papanikolaou - University of Crete"),
tags$li("Pantelis Bagos - University of Thessaly"),
tags$li("Nikos Kyrpides - JGI, Berkeley Labs"),
tags$li("Ioannis Iliopoulos - University of Crete")
),
br(),
strong("Development:"),
tags$ul(
tags$li("Georgios Pavlopoulos (g.pavlopoulos@lbl.gov)"),
tags$li("Theodosis Theodosiou (theodosios.theodosiou@gmail.com) "),
tags$li("Georgios Efstathiou (y.efstathiou@gmail.com ) ")
)
)
)
)
# By default, Shiny limits file uploads to 5MB per file.
# You can modify this limit by using the shiny.maxRequestSize option.
# For example, adding options(shiny.maxRequestSize=30*1024^2)
# to the top of server.R would increase the limit to 30MB.
# From within R, inside the app source dir, start the app with: shiny::runApp(getwd())
# From a shell, start the app with: R -e "shiny::runApp('~/appsourcedir')"
library(rcytoscapejs)
if(!require(shiny))install.packages('shiny')
runApp()
runApp()
install.packages("igraph")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
runApp()
runApp()
shiny::runApp()
g = random.graph.game(500, p.or.m = 0.005, type = "gnp")
library('igraph')
g = random.graph.game(500, p.or.m = 0.005, type = "gnp")
plot(g, layout = layout.fruchterman.reingold, vertex.label= NA, edge.arrow.size=0.02,vertex.size = 0.5, xlab = "Random Network: G(N,p) model")
hist_g = hist(degree(g), main="random graph", col="Gray")
g1 = sample_smallworld(1,size=500,nei=4,p=0.03)
plot(g1, layout = layout.fruchterman.reingold, vertex.label= NA, edge.arrow.size=0.02,vertex.size = 0.5, xlab = "Random Network: G(N,p) model")
h1= sample_pa (500)
par(mfrow = c(1,1))
plot(h1, layout = layout.fruchterman.reingold, vertex.label= NA, edge.arrow.size=0.02,vertex.size = 0.5, xlab = "Random Network: G(N,p) model")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
res<-data.frame(as.vector(eval(parse(text=command))))
ranking <- function(igraph, method, nodeRanking = TRUE){
if(length(method)==0)
return(NULL)
tmp<-unlist(strsplit(method,"\t",fixed=T))
description<-tmp[1]
command<-tmp[2]
print(paste0("Calculating ranking: ",command))
res<-data.frame(as.vector(eval(parse(text=command))))
if(nodeRanking)
res$V2<-names(V(igraph))
else{
if(as.logical(is.directed(igraph))){
edgesym <- "\U2794"
}
else{
edgesym <- "\U2015"
}
res$V2<-apply(ends(igraph, E(igraph)), 1, paste, collapse=edgesym)
}
return(res[,c(2,1)])
}
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::showReactLog()
reactlogShow
shiny::runApp()
shiny::showReactLog()
loadNetworkFromFile <- function() {
dataset1 <- NULL
switch(input$uiLoadGraphOptionsInput, oF = {
if (!is.null(input$file1)) {
dataset1 <- read_data(input$file1$datapath)
}
}, oR_Barbasi = {
dataset1 <- data.frame(get.edgelist(barabasi.game(n = as.integer(input$oR_selected_size), power = 1, directed = F)))
}, oR_Erdos_Renyi = {
n <- as.integer(input$oR_selected_size)
dataset1 <- data.frame(get.edgelist(erdos.renyi.game(n = n, p.or.m = as.integer(n * log10(n)), type = "gnm", directed = F)))
}, oR_Watts_Strogatz = {
n <- as.integer(input$oR_selected_size)
dataset1 <- data.frame(get.edgelist(sample_smallworld(1, n, 2, 0.05)))
}, oR_Bipartite = {
n <- as.integer(input$oR_selected_size)
v <- sample(c(F, T), n, T)
v1 <- sample(which(v == F))
v2 <- sample(which(v == T))
e <- unlist(mapply(c, v1, v2, SIMPLIFY = F))
dataset1 <- data.frame(get.edgelist(make_bipartite_graph(v, e, directed = F)))
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
doAddNetwork <- observeEvent(input$btnAddNetwork, {
dataset <- loadNetworkFromFile()
if (!is.null(dataset)) {
nid <- UUIDgenerate(T)      #time-base UUID is generated
nn <- input$networkName
cnt <- 1                    #count
while (nn %in% reactiveVars$StoredNetworks$name) {  #reactiveVars: represents a single reactive variable.
cnt <- cnt + 1
nn <- paste(input$networkName, cnt)      #paste: converts its arguments (via as.character) to character strings
print("hello")
}
df <- data.frame(id = nid, name = nn, stringsAsFactors = F)
if (nrow(dataset) > 10000) {
dataset <- dataset[1:10000, ]
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("reactlog")
tools:::.BioC_version_associated_with_R_version()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(MCL)
shiny::runApp()
shiny::runApp()
shiny::runApp()
